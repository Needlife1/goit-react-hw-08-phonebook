{"version":3,"file":"static/js/313.676b5b14.chunk.js","mappings":"qPAEaA,GAAaC,EAAAA,EAAAA,IAAO,OAAPA,CAAcC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+7BCF3BC,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,OAAQ,EACxCC,EAAe,SAAAF,GAAK,OAAIA,EAAMG,OAAQ,EACtCC,EAAkB,SAAAJ,GAAK,OAAIA,EAAMG,QAAQE,SAAU,E,SCGnDC,EAAO,WAClB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAYX,GAwB7B,OACEY,EAAAA,EAAAA,MAAChB,EAAU,CAACiB,SAvBO,SAAAC,GACnBA,EAAEC,iBAEF,IAAMC,EAAOF,EAAEG,OACTC,EAAOF,EAAKG,SAASD,KAAKE,MAC1BC,EAASL,EAAKG,SAASE,OAAOD,MAEhCV,EAASY,QACWZ,EAASY,MAAMC,MACnC,SAAAC,GAAO,OAAIA,EAAQN,OAASA,CAAI,IAOhCO,MAAM,0FAADC,OAAqBR,EAAI,uFAJ9BS,QAAQC,IAAI,CAAEV,KAAAA,EAAMG,OAAAA,IAEpBb,GAASqB,EAAAA,EAAAA,IAAW,CAAEX,KAAAA,EAAMG,OAAAA,OAKhCL,EAAKc,OACP,EAGqCC,SAAA,EACjCnB,EAAAA,EAAAA,MAAA,SAAOoB,QAAQ,OAAMD,SAAA,CAAC,QAEpBE,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACLhB,KAAK,OACLiB,QAAQ,2HACRC,MAAM,yIACNC,UAAQ,EACRC,GAAG,aAIP1B,EAAAA,EAAAA,MAAA,SAAOoB,QAAQ,SAAQD,SAAA,CAAC,UAEtBE,EAAAA,EAAAA,KAAA,SACEK,GAAG,SACHJ,KAAK,MACLhB,KAAK,SACLiB,QAAQ,qGACRC,MAAM,+FACNC,UAAQ,QAGZJ,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAAQH,SAAC,kBAG5B,ECzDaQ,GAAoB1C,EAAAA,EAAAA,IAAO,KAAPA,CAAYC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+mBCOhCyC,EAAc,WACzB,IAAM9B,GAAWC,EAAAA,EAAAA,IAAYX,GACvByC,GAAS9B,EAAAA,EAAAA,IAAYR,GACrBK,GAAWC,EAAAA,EAAAA,MACXiC,EHT6B,SAAChC,EAAU+B,GAC9C,OAAO/B,EAASY,MAAMmB,QAAO,SAAAjB,GAAO,OAAIA,EAAQN,KAAKyB,SAASF,EAAO,GACvE,CGO0BG,CAAsBlC,EAAU+B,GAIxD,OACER,EAAAA,EAAAA,KAAAY,EAAAA,SAAA,CAAAd,UACEE,EAAAA,EAAAA,KAACM,EAAiB,CAAAR,SACfW,EAAgBI,KAAI,SAAAtB,GAAO,OAC1BZ,EAAAA,EAAAA,MAAA,MAAqB0B,GAAId,EAAQc,GAAGP,SAAA,EAClCnB,EAAAA,EAAAA,MAAA,KAAGmC,MAAO,CAAEC,MAAO,QAASjB,SAAA,CACzBP,EAAQN,KAAK,KAAGM,EAAQH,WAE3BY,EAAAA,EAAAA,KAAA,UAAQgB,QAAS,kBAVNX,EAUyBd,EAAQc,GAV3B9B,GAAS0C,EAAAA,EAAAA,IAAcZ,IAA7B,IAAAA,CAUoC,EAACP,SAAC,aAJ1CP,EAAQc,GAKZ,OAKf,EC7Baa,GAAetD,EAAAA,EAAAA,IAAO,MAAPA,CAAaC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,sd,UCE5BqD,EAAS,WACpB,IAAM5C,GAAWC,EAAAA,EAAAA,MAMjB,OACEG,EAAAA,EAAAA,MAACuC,EAAY,CAAApB,SAAA,EACXE,EAAAA,EAAAA,KAAA,SAAOD,QAAQ,SAAQD,SAAC,2BACxBE,EAAAA,EAAAA,KAAA,SACEK,GAAG,SACHJ,KAAK,OACLhB,KAAK,SACLmC,SAXqB,SAAAvC,GACzB,IAAMwC,EAAcxC,EAAEG,OAAOG,MAC7BZ,GAAS+C,EAAAA,EAAAA,IAAUD,GACrB,MAYF,ECde,SAASE,IACtB,IAAMhD,GAAWC,EAAAA,EAAAA,MACXgD,GAAa9C,EAAAA,EAAAA,IAAYN,GAM/B,OAJAqD,EAAAA,EAAAA,YAAU,WACRlD,GAASmD,EAAAA,EAAAA,MACX,GAAG,CAACnD,KAGFI,EAAAA,EAAAA,MAAAiC,EAAAA,SAAA,CAAAd,SAAA,EACEE,EAAAA,EAAAA,KAAC1B,EAAI,KACL0B,EAAAA,EAAAA,KAAA,MAAIc,MAAO,CAAEC,MAAO,QAASjB,SAAC,cAC9BE,EAAAA,EAAAA,KAACmB,EAAM,KACPnB,EAAAA,EAAAA,KAAA,OAAAF,SAAM0B,GAAc,4BACpBxB,EAAAA,EAAAA,KAACO,EAAW,MAGlB,C","sources":["components/Form/Form.styled.js","redux/contacts/selector.js","components/Form/Form.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FormStyled = styled('form')`\n  width: 300px;\n  border: 2px solid greenyellow;\n  padding: 16px;\n  background-color: black;\n\n  label {\n    color: greenyellow;\n    font-weight: 700;\n    font-size: 20px;\n  }\n\n  input {\n    margin-left: 20px;\n    border: 1px solid greenyellow;\n    height: 20px;\n    border-radius: 10px;\n    margin-bottom: 15px;\n  }\n\n  button {\n    padding: 15px 30px;\n    font-size: 18px;\n    outline: none;\n    border: none;\n    border-radius: 50%;\n    transition: 0.5s;\n    background: #1e1e1e;\n    color: greenyellow;\n    box-shadow: 0 0 10px #363636, inset 0 0 10px #363636;\n  }\n\n  button:hover {\n    animation: a 0.5s 1 linear;\n  }\n\n  @keyframes a {\n    0% {\n      transform: scale(0.7, 1.3);\n    }\n\n    25% {\n      transform: scale(1.3, 0.7);\n    }\n\n    50% {\n      transform: scale(0.7, 1.3);\n    }\n\n    75% {\n      transform: scale(1.3, 0.7);\n    }\n\n    100% {\n      transform: scale(1, 1);\n    }\n  }\n`;\n","export const selectContacts = state => state.numbers;\nexport const selectFilter = state => state.filters;\nexport const selectIsLoading = state => state.filters.isLoading;\nexport const selectError = state => state.filters.error;\nexport const selectVisibleContacts = (contacts, filter) => {\n  return contacts.items.filter(contact => contact.name.includes(filter));\n};\n","import { FormStyled } from './Form.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selector';\n\nexport const Form = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const form = e.target;\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n\n    if (contacts.items) {\n      const contactExists = contacts.items.some(\n        contact => contact.name === name\n      );\n      if (!contactExists) {\n        console.log({ name, number });\n\n        dispatch(addContact({ name, number }));\n      } else {\n        alert(`Контакт с именем ${name} уже существует!`);\n      }\n    }\n    form.reset();\n  };\n\n  return (\n    <FormStyled onSubmit={handleSubmit}>\n      <label htmlFor=\"Name\">\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          id=\"Name\"\n        />\n      </label>\n\n      <label htmlFor=\"Number\">\n        Number\n        <input\n          id=\"Number\"\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </FormStyled>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactListStyled = styled('ul')`\n  button {\n    padding: 15px 30px;\n    font-size: 18px;\n    outline: none;\n    border: none;\n    border-radius: 50%;\n    transition: 0.5s;\n    background: #1e1e1e;\n    color: greenyellow;\n    box-shadow: 0 0 10px #363636, inset 0 0 10px #363636;\n  }\n\n  button:hover {\n    animation: a 0.5s 1 linear;\n  }\n\n  @keyframes a {\n    0% {\n      transform: scale(0.7, 1.3);\n    }\n\n    25% {\n      transform: scale(1.3, 0.7);\n    }\n\n    50% {\n      transform: scale(0.7, 1.3);\n    }\n\n    75% {\n      transform: scale(1.3, 0.7);\n    }\n\n    100% {\n      transform: scale(1, 1);\n    }\n  }\n`;\n","import { ContactListStyled } from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport {\n  selectContacts,\n  selectFilter,\n  selectVisibleContacts,\n} from '../../redux/contacts/selector';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const visibleContacts = selectVisibleContacts(contacts, filter);\n\n  const handleDelete = id => dispatch(deleteContact(id));\n\n  return (\n    <>\n      <ContactListStyled>\n        {visibleContacts.map(contact => (\n          <li key={contact.id} id={contact.id}>\n            <p style={{ color: 'pink' }}>\n              {contact.name}: {contact.number}\n            </p>\n            <button onClick={() => handleDelete(contact.id)}>Delete</button>\n          </li>\n        ))}\n      </ContactListStyled>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterStyled = styled('div')`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  padding: 15px;\n  border: 2px solid greenyellow;\n  background-color: black;\n  gap: 15px;\n  align-items: center;\n\n  label {\n    color: greenyellow;\n  }\n\n  input {\n    margin-left: 20px;\n    border: 1px solid greenyellow;\n    height: 20px;\n    border-radius: 10px;\n    margin-bottom: 15px;\n  }\n\n  label {\n    color: greenyellow;\n    font-weight: 700;\n    font-size: 20px;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { FilterStyled } from './Filter.styled';\nimport { setFilter } from '../../redux/contacts/filtersSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleFilterChange = e => {\n    const filterValue = e.target.value;\n    dispatch(setFilter(filterValue));\n  };\n  return (\n    <FilterStyled>\n      <label htmlFor=\"filter\">Find contacts by name</label>\n      <input\n        id=\"filter\"\n        type=\"text\"\n        name=\"filter\"\n        onChange={handleFilterChange}\n      />\n    </FilterStyled>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchTasks } from '../redux/contacts/operations';\nimport { Form } from '../components/Form/Form';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { Filter } from '../components/Filter/Filter';\nimport { selectIsLoading } from '../redux/contacts/selector';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Form />\n      <h2 style={{ color: 'pink' }}>Contacts</h2>\n      <Filter />\n      <div>{isLoggedIn && 'Request in progress...'}</div>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["FormStyled","styled","_templateObject","_taggedTemplateLiteral","selectContacts","state","numbers","selectFilter","filters","selectIsLoading","isLoading","Form","dispatch","useDispatch","contacts","useSelector","_jsxs","onSubmit","e","preventDefault","form","target","name","elements","value","number","items","some","contact","alert","concat","console","log","addContact","reset","children","htmlFor","_jsx","type","pattern","title","required","id","ContactListStyled","ContactList","filter","visibleContacts","includes","selectVisibleContacts","_Fragment","map","style","color","onClick","deleteContact","FilterStyled","Filter","onChange","filterValue","setFilter","Tasks","isLoggedIn","useEffect","fetchTasks"],"sourceRoot":""}